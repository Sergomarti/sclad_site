# Generated by Django 3.0 on 2020-05-23 19:57

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdditionProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_whom', models.CharField(max_length=200, verbose_name='От кого')),
                ('date', models.DateField(verbose_name='Дата добавления')),
                ('quantity_of_goods', models.PositiveIntegerField(verbose_name='Количество')),
                ('comment', models.CharField(max_length=5000, verbose_name='Комментарий')),
            ],
        ),
        migrations.CreateModel(
            name='TypeOfGoods',
            fields=[
                ('for_smbd', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='Вид')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(max_length=200, verbose_name='Бренд')),
                ('goods', models.CharField(max_length=200, verbose_name='Товар')),
                ('quantity_of_goods', models.PositiveIntegerField(verbose_name='Количество')),
                ('image', models.ImageField(blank=True, null=True, upload_to='products/', verbose_name='Изоброжение')),
                ('view', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='users.TypeOfGoods', verbose_name='Вид')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('for_whom', models.CharField(max_length=200, verbose_name='Для кого')),
                ('quantity_of_goods', models.PositiveIntegerField(verbose_name='Количество')),
                ('date', models.DateField(verbose_name='Дата заказа')),
                ('customer_comment', models.CharField(max_length=5000, verbose_name='Комментарий заказчика')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='users.Product', verbose_name='Товар')),
            ],
        ),
        migrations.CreateModel(
            name='HistoryOrders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Confirm', 'Confirm'), ('Reject', 'Reject')], default='Reject', max_length=20)),
                ('admin_comment', models.CharField(max_length=5000, verbose_name='Комментарий администратора')),
                ('coming', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='users.AdditionProduct', verbose_name='Приход')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='users.Order', verbose_name='Заказ')),
            ],
        ),
        migrations.AddField(
            model_name='additionproduct',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='users.Product', verbose_name='Товар'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telephone', models.CharField(max_length=10)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('secret_email_token', models.CharField(max_length=256)),
                ('verification_email_sent_at', models.DateTimeField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['username', 'email'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
